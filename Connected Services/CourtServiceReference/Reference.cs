//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoRepairShop.CourtServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceContract", Namespace="http://schemas.datacontract.org/2004/07/CourtService")]
    [System.SerializableAttribute()]
    public partial class ServiceContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalPartCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalServicesCostField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalPartCost {
            get {
                return this.TotalPartCostField;
            }
            set {
                if ((this.TotalPartCostField.Equals(value) != true)) {
                    this.TotalPartCostField = value;
                    this.RaisePropertyChanged("TotalPartCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalServicesCost {
            get {
                return this.TotalServicesCostField;
            }
            set {
                if ((this.TotalServicesCostField.Equals(value) != true)) {
                    this.TotalServicesCostField = value;
                    this.RaisePropertyChanged("TotalServicesCost");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CourtServiceReference.ICourt")]
    public interface ICourt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourt/MakeDecision", ReplyAction="http://tempuri.org/ICourt/MakeDecisionResponse")]
        int MakeDecision(AutoRepairShop.CourtServiceReference.ServiceContract composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourt/MakeDecision", ReplyAction="http://tempuri.org/ICourt/MakeDecisionResponse")]
        System.Threading.Tasks.Task<int> MakeDecisionAsync(AutoRepairShop.CourtServiceReference.ServiceContract composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICourtChannel : AutoRepairShop.CourtServiceReference.ICourt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CourtClient : System.ServiceModel.ClientBase<AutoRepairShop.CourtServiceReference.ICourt>, AutoRepairShop.CourtServiceReference.ICourt {
        
        public CourtClient() {
        }
        
        public CourtClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CourtClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourtClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourtClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int MakeDecision(AutoRepairShop.CourtServiceReference.ServiceContract composite) {
            return base.Channel.MakeDecision(composite);
        }
        
        public System.Threading.Tasks.Task<int> MakeDecisionAsync(AutoRepairShop.CourtServiceReference.ServiceContract composite) {
            return base.Channel.MakeDecisionAsync(composite);
        }
    }
}
